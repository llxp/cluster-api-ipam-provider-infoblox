// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/cluster-api-ipam-provider-infoblox/internal/controllers (interfaces: HostnameHandler)

// Package utilmock is a generated GoMock package.
package utilmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHostnameHandler is a mock of HostnameHandler interface.
type MockHostnameHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHostnameHandlerMockRecorder
}

// MockHostnameHandlerMockRecorder is the mock recorder for MockHostnameHandler.
type MockHostnameHandlerMockRecorder struct {
	mock *MockHostnameHandler
}

// NewMockHostnameHandler creates a new mock instance.
func NewMockHostnameHandler(ctrl *gomock.Controller) *MockHostnameHandler {
	mock := &MockHostnameHandler{ctrl: ctrl}
	mock.recorder = &MockHostnameHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostnameHandler) EXPECT() *MockHostnameHandlerMockRecorder {
	return m.recorder
}

// GetHostname mocks base method.
func (m *MockHostnameHandler) GetHostname(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostname", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostname indicates an expected call of GetHostname.
func (mr *MockHostnameHandlerMockRecorder) GetHostname(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostname", reflect.TypeOf((*MockHostnameHandler)(nil).GetHostname), arg0)
}
